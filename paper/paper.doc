                     七号前必须完成

4  5摘要


2 3
绪论
1.问题的背景与现状

曹磊:首先是闲置物品增加。我国居民人均可支配收入不断增加, 国内生产总值提高约31万亿元, 人们创造的财富愈加丰富, 物品迭代更新速度加快, 物质富足促进个体闲置物品增

政策扶持。虽然我国二手交易平台较其他发达国家起步晚, 但分享经济大潮到来, 国家发布了一系列政策支持“分享经济”, “物尽其用”“循环利用”等绿色消费理念逐渐流行, 越来越多的消费者特别是年轻人成为消

移动支付时代到来。手机的普及率不断提高, 移动电商购买成交数占比巨大, 非现金的支付方式愈加普及, 新的消费方式和消费理念的渗透使得人们对二手电商平台交易的接受度越来越高。另



闲置资源的共享, 一种方式是短租, 另一种模式则是转让, 使物品进入流通再循环的通道, 即二手交易。随着个体闲置物品存量的激增, 买卖双方交易意愿的提升, 网络二手交易以异乎寻常的速度发展起来。


2.本文主要研究工作与创新点

信用体系的缺位  问题还在于没有统一的标准。如何判定商品质量?如何定义物品的新旧程度?二手物品出现质量问题如何追责?

3.论文组织结构


25号

技术与原理

Android技术简介
   Android系统是谷歌公司和开放手机联盟基于Linux内核及其他开源代码开发的移动操作系统。主要应用于移动设备，如智能手机和平板电脑。Android系统从2007年11月首次推出后，目前已经发布到Android 10（Android Q Beta）。 由于具有完全开放的源代码，应用丰富，开发门槛低，强大的社区支持等优点，Android系统占据了全球移动操作系统超过百分之八十五的市场。因此使用Android系统进行二手交易平台的开发具有代表性意义。

Android系统架构

   Android是一种基于Linux内核的开放源代码软件栈，为广泛的设备和机型而创建。如图是Android系统架构的经典示意图。它将Android从高层到底层分为应用程序层（System Apps），应用程序框架层（Java API Framework），系统运行库和运行环境层(Libraries + Android Runtime)和Linux核心层(HAL+ Linux Kernel)。Android的系统架构鼓励系统的组件重用，共享组件间的数据，并且定义了组件间的访问控制权限。这些层次结构是相互独立的，也是相互关联的。
   应用程序层
       Android会同一系列核心应用程序包一起发布，该应用程序包包括Email客户端，SMS短消息程序，日历，地图，浏览器，联系人管理程序等，用户可以直接使用。所有的应用程序通常都是使用JAVA或者Kotlin语言编写的。
 应用程序框架层 
   该层是Android应用开发的基础，开发人员大部分情况是在和它打交道，可以通过调用该层的API接口来生成新的应用程序。应用程序框架层包括活动管理器、窗口管理器、内容提供者、视图系统、包管理器、电话管理器、资源管理器、位置管理器、通知管理器。任何一个应用程序都可以发布自身的功能模块，而其他应用程序则可以使用这些已发布的功能模块。基于这样的重用机制，用户就可以方便地替换平台本身的各种应用程序组件。
   系统运行库和运行环境层
   系统库包括九个子系统，分别是Surface Manager、Media Framework、SQLite、OpenGLEState、FreeType、WebKit、SGL、SSL和Libc。Android Runtime包括核心库和ART虚拟机（Android 5.0前是Dalvik虚拟机）。前者既兼容了大多数Java语言所需要调用的功能函数，又包括了Android的核心库，比如android.os、android.Net、android.media等等。后者是一种基于寄存器的java虚拟机，虚拟机主要是完成对生命周期的管理、堆栈的管理、线程的管理、安全和异常的管理以及垃圾回收等重要功能。
   Linux核心层
　　linux内核(Linux Kernel)
　　Android核心系统服务依赖于Linux2.6内核，如安全性、内存管理、进程管理、网络协议栈和驱动模型。Linux内核也是作为硬件与软件栈的抽象层。驱动：显示驱动、摄像头驱动、键盘驱动、WiFi驱动、Audio驱动、flash内存驱动、Binder（IPC）驱动、电源管理等。
     硬件抽象层（Hardware Abstraction Layer）
为上层的Java API Framework提供相关硬件的界面显示，Audio，Bluetooth等是组成硬件抽象层的库模块，实现每个硬件的界面显示功能。
    


Android应用组件
  应用组件是 Android 应用的基本构建基块。每个组件都是一个不同的点，系统可以通过它进入应用。 并非所有组件都是用户的实际入口点，有些组件相互依赖，但每个组件都以独立实体形式存在，并发挥特定作用。每个组件都是唯一的构建基块，有助于定义应用的总体行为。Android共有四种不同的应用组件类型。每种类型都服务于不同的目的，并且具有定义组件的创建和销毁方式的不同生命周期。四大基本组件都需要注册才能使用，每个Activity、Service、Content Provider都需要在AndroidManifest文件中进行配置。AndroidManifest文件中未进行声明的Activity、Service以及Content Provider将不为系统所见，从而也就不可用。BroadcastReceiver也可以动态注册。
活动（Activity）
　　Activity 表示具有用户界面的单一屏幕，为用户提供与系统交互的界面。每一个应用都有一个或者多个Acticit。例如，电子邮件应用可能具有一个显示新电子邮件列表的 Activity、一个用于撰写电子邮件的 Activity 以及一个用于阅读电子邮件的 Activity。 尽管这些 Activity 通过协作在电子邮件应用中形成了一种紧密结合的用户体验，但每一个 Activity 都独立于其他 Activity 而存在。 因此，其他应用可以启动其中任何一个 Activity（如果电子邮件应用允许）。 例如，相机应用可以启动电子邮件应用内用于撰写新电子邮件的 Activity，以便用户共享图片。当用户浏览，退出和返回应用时，应用中的 Activity实例会在其生命周期中转换为不同的状态。Activity的生命周期如下图所示
　　
服务（Service）
服务是一种在后台运行的组件，用于执行长时间运行的操作或为远程进程执行作业。服务的运行是不可见的，不提供用户界面。 例如，当用户位于其他应用中时，服务可能在后台播放音乐或者通过网络获取数据，但不会阻断用户与 Activity 的交互。 服务的启动、停止、和控制是通过其他应用程序组件来实现的，包括Activity，Broadcast Receiver和其他Service。其具体的生命周期如下图所示。

内容提供者（ContentProvider）
内容提供者管理一组共享的应用数据。应用将数据存储在文件系统、SQLite 数据库、网络上或应用可以访问的任何其他永久性存储位置。 其他应用可以通过内容提供者查询数据，甚至修改数据（如果内容提供程序允许）。 例如，Android 系统可提供管理用户联系人信息的内容提供程序。 因此，任何具有适当权限的应用都可以查询内容提供程序的某一部分（如 ContactsContract.Data），以读取和写入有关特定人员的信息。内容提供程序也适用于读取和写入应用不共享的私有数据。 例如，记事本示例应用使用内容提供程序来保存笔记。
广播接收器（BroadcastReceiver）
广播接收器是一种用于响应系统范围广播通知的组件。 许多广播都是由系统发起的。例如，通知屏幕已关闭、电池电量不足或已拍摄照片的广播。应用也可以发起广播。例如，通知其他应用某些数据已下载至设备，并且可供其使用。 尽管广播接收器不会显示用户界面，但它们可以创建状态栏通知，在发生广播事件时提醒用户。但广播接收器更常见的用途只是作为通向其他组件的“通道”，设计用于执行极少量的工作。例如，它可能会基于事件发起一项服务来执行某项工作。
  

 Android数据存储
   数据持久化是指那些内存中的瞬时数据保存到存储设备中，保证即使在手机或电脑关机的情况下，这些数据依然不会丢失。Android系统中主要提供了三种方式用于简单的实现数据持久化功能，即文件存储、SharePreference存储，以及数据库存储。
   文件存储是Android中最基本的一种数据存储方式。它不对存储的内容进行任何格式化处理，所有数据都是原封不动地保存到文件中。因而它比较适合用来存储一些简单的文本数据或二进制数据。
   SharePrefence存储不同于文件存储，是使用键值对的方式来存储数据的。当保存一条数据时，需要为这条数据提供一个唯一标识的键值，读取数据时，也会通过这个键值获取到数据。SharePreference支持多种不同的数据类型存储。即如果存储的数据是字符串，那么读取出的数据也是字符串。
   Android系统内置了SQLite数据库。SQLite是一款轻量级的关系型数据库，它的运算速度非常快，占用资源很少，通常只需要几百KB的内存就足够了。SQLite不仅支持标准的SQL语法，还遵循了数据库的ACID事务，所以使用起来比较方便。
   
   
Bmob云服务平台
  Bmob云服务平台是专注于移动应用Serverless云服务的平台，基于Bass（Backend as a Service）移动后端即服务的开发模式进行研发的。Bmob为开发者把服务端的东西全部打包了。开发者不用再考虑如何写服务端，如何设计数据库，如何搭建服务器，而只需调用相应API接口，就可以实现相应网络功能。Bmob为开发者提供了强大的后端支持，使得开发者可以专注于应用的开发。
  Bomb平台具有数据服务，文件服务，消息推送，即时通讯等强大的功能。本应用主要使用了以下的功能。
  数据服务：Bomb平台拥有一个网页管理平台，可以创建数据表，增加，修改，查询，删除相应数据，并且可以通过csv文件大批量导入数据。同时也可以通过移动端的代码进行相应的操作，与网页端的操作所产生的作用一样。Bmob平台支持String，Boolean，List，Integer，Float，Short，Double等Java类型，同时也支持继承了BombObect的自定义类型，满足大部分开发者的需要。
  文件服务： Bomb平台通过BmobFile类来支持文件的批量上传和批量下载，并返回相应的url，以供开发者进行调用。
  云函数服务： Bomb云函数是云端的业务逻辑代码的功能，允许开发者可以在服务端执行一些重要和复杂的业务逻辑。而且一旦在云端更新了代码，所有应用将会更新相应逻辑，使得新功能的发布变得简单可控。云函数的执行可以通过web管理后台设定定时执行，或者通过ResetApi调用，或者通过客户端SDK调用。
  
第三方库
  在本应用的开发过程中，除用到Android系统自带各种功能外，还用到很多优秀的第三库函数。数量庞大的第三库也是Android系统的优势之一，方便了开发者学习和应用开发。以下将介绍本应用主要用到的第三库。
  Fresco
  Fresco是Facebook提供的开源图片加载组件，它能够从网络，本地存储和Android资源文件中加载图片，且具有三级缓存设计（2级内存，1级文件）。Fresco中实现了各种加载过程以及加载后的图片绘制。
  EventBus
   EventBus是一个Android端优化的publish/subscribe消息总线，简化了应用程序内各组件间、组件与后台线程间的通信。使用过程中，需要在一个组件中注册EventBus事件，然后定义接收方法，设置接收方法执行的线程，然后在其他组件发布事件。
  ButterKnife
   ButterKnife是一个专注于Android系统的View注入框架，它会在编译时对注解进行解析完成相关代码的生成，所以不会影响运行时的性能。它有强大的View绑定和Click事件处理功能，简化代码，提升开发效率，方便处理Adapter里的ViewHolder绑定问题等优点。


本章小结
    本章简单描述了Android相关的技术，应用所使用的后端平台，以及介绍了应用所用到的第三库。
  
28号
系统需求分析
  本章主要对基于Android的二手交易应用进行一个系统且详细的需求分析，旨在为之后的系统设计提供一个良好的基础。包括系统可行性分析，功能性需求分析，非功能性需求分析。
  系统可行性分析
     技术可行性
       本系统是以Bmob云平台作为后台服务端，以Android系统作为移动客户端进行开发的应用。 由第二章提到的介绍可知，目前Android的技术已趋向成熟，具有大量优秀的第三库，而且Android每个版本都具有良好的低版本兼用性。所以，以Android系统进行客户端的开发，技术上完全可以达到。Bomb云平台作为一个商用的全方位一体化的后端服务平台,具有成熟稳定的技术，可以让移动开发更简单,  足以满足本系统的技术需求。
   经济可行性
      Android相关的技术多是免费开源的，而Bmob云平台也有免费版本。因此仅需要一台PC机进行开发，一部Android手机进行测试即可。从经济角度上来说可行。
 
     开发可行性
         整个系统主要是针对客户端进行开发，主要开发工具是Android Studio。而且，可以直接从Android Studio中直接下载大量免费开源的插件进行开发。至于后台服务端，直接使用Bmob云平台，不需要自己布置，使用简单。本系统主要开发的语言是Java，由于Java的普及性非常广，相应学习资料非常多，所以也不成问题。因此，本系统完全可以满足开发的复杂度和软件实现的功能。


 功能性需求分析
     
   
  非功能性需求分析

29 30
系统设计


31
系统实现（截好图）


1系统测试